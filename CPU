package cpu;

import java.util.*;

/**
 *
 * @author Kerollos Mansour
 * @author Mina Hany
 * @author Adel Magdy
 */

class Process {
    String name;
    String color;
    int arrivalTime;
    int burstTime;
    int priority;
    int waitTime;
    int turnaroundTime;
    public Process(String name, String color, int arrivalTime , int burst, int priority) {
        this.name = name;
        this.color = color;
        this.arrivalTime = arrivalTime ;
        this.burstTime = burst;
        this.priority = priority;
        this.waitTime = 0;
        this.turnaroundTime = 0;
    }
    
    public int getBurstTime() {
        return burstTime;
    }

    public int getPriority() {
        return priority;
    }
    public int getArrivalTime() {
        return arrivalTime;
    }
}
public class CPU {
    
    //Shortest- Job First (SJF) Non-Preemptive
    private static void SJF(List<Process> processes){
        
        processes.sort(Comparator.comparing(p -> p.burstTime));
        int currentTime = 0;
        double totalTurnaroundTime = 0;
        double totalWaitingTime = 0;
        
        for (Process process : processes) {
            // Wait for the process to arrive
            if (currentTime < process.arrivalTime) {
                currentTime = process.arrivalTime;
            }
            // Execute the process
            process.waitTime = currentTime - process.arrivalTime;
            currentTime += process.burstTime;
            process.turnaroundTime = currentTime - process.arrivalTime;

            System.out.println("Turnaround Time for " + process.name + ": " + process.turnaroundTime);
            System.out.println("Waiting Time for " + process.name + ": " + process.waitTime + "\n");
            
            totalTurnaroundTime +=  process.turnaroundTime;
            totalWaitingTime += process.waitTime;
        }
//        processes.sort(Comparator.comparing(p -> p.name));        //Re-order the list as it created or inserted
        System.out.println("Average Turnaround Time: " + totalTurnaroundTime/processes.size());
        System.out.println("Average Waiting Time: " + totalWaitingTime/processes.size());
        
    }
        // Shortest Remaining Time First (SRTF) Scheduling
        private static void SRTF(List<Process> processes) {
                int currentTime = 0;
                double totalTurnaroundTime = 0;
                double totalWaitingTime = 0;
                int completedProcesses = 0;
        
                while (completedProcesses < processes.size()) {
                    // Sort the processes based on remaining burst time first then priority and ArrivalTime
                    Collections.sort(processes, Comparator.comparingInt(Process::getBurstTime)
                            .thenComparingInt(Process::getPriority)
                            .thenComparingInt(Process::getArrivalTime));
                    Process currentProcess = processes.get(0);
        
                    // Wait for the process to arrive
                    if (currentTime < currentProcess.arrivalTime) {
                        currentTime = currentProcess.arrivalTime;
                    }
        
                    // Execute the process
                    currentProcess.waitTime = currentTime - currentProcess.arrivalTime;
                    currentTime += currentProcess.burstTime;
                    currentProcess.turnaroundTime = currentTime - currentProcess.arrivalTime;
        
                    System.out.println("\nTime " + currentTime + ": Executing " + currentProcess.name +
                            " (Color: " + currentProcess.color + ")");
                    System.out.println("Turnaround Time for " + currentProcess.name + ": " + currentProcess.turnaroundTime);
                    System.out.println("Waiting Time for " + currentProcess.name + ": " + currentProcess.waitTime + "\n");
        
                    totalTurnaroundTime += currentProcess.turnaroundTime;
                    totalWaitingTime += currentProcess.waitTime;
        
                    // Remove the completed process
                    processes.remove(currentProcess);
                    completedProcesses++;
                }
        
                double avgTurnaroundTime = completedProcesses > 0 ? totalTurnaroundTime / completedProcesses : 0;
                double avgWaitingTime = completedProcesses > 0 ? totalWaitingTime / completedProcesses : 0;
        
                System.out.println("Average Turnaround Time: " + avgTurnaroundTime);
                System.out.println("Average Waiting Time: " + avgWaitingTime);
            }
    
    //Priority Scheduling Non-Preemptive
    private static void priority(List<Process> processes){
        
        processes.sort(Comparator.comparing(p -> p.priority));
        int currentTime = 0;
        double totalTurnaroundTime = 0;
        double totalWaitingTime = 0;
        
        for (Process process : processes) {
            // Wait for the process to arrive
            if (currentTime < process.arrivalTime) {
                currentTime = process.arrivalTime;
            }
            // Execute the process
            process.waitTime = currentTime - process.arrivalTime;
            currentTime += process.burstTime;
            process.turnaroundTime = currentTime - process.arrivalTime;

            System.out.println("Turnaround Time for " + process.name + ": " + process.turnaroundTime);
            System.out.println("Waiting Time for " + process.name + ": " + process.waitTime + "\n");
            
            totalTurnaroundTime +=  process.turnaroundTime;
            totalWaitingTime += process.waitTime;
        }
        processes.sort(Comparator.comparing(p -> p.name));        //Re-order the list as it created or inserted
        System.out.println("Average Turnaround Time: " + totalTurnaroundTime/processes.size());
        System.out.println("Average Waiting Time: " + totalWaitingTime/processes.size());
        
    }
    
    public static void main(String[] args) {

        //List for the processes
        List<Process> processes = new ArrayList<>();

        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        for (int i = 1; i <= numProcesses; i++) {
            System.out.println("Enter details for Process " + i + ":");
            System.out.print("Name: ");
            String name = scanner.next();

            System.out.print("Color: ");
            String color = scanner.next();

            System.out.print("Arrival Time: ");
            int arrivalTime = scanner.nextInt();

            System.out.print("Burst Time: ");
            int burstTime = scanner.nextInt();

            System.out.print("Priority Number: ");
            int priority = scanner.nextInt();

            processes.add(new Process(name, color, arrivalTime, burstTime, priority));
        }

//        SJF(processes);           //Shortest- Job First (SJF) Non-Preemptive
//        SRTF(processes);
//        priority(processes);      //Priority Scheduling Non-Preemptive
//
    }

}
